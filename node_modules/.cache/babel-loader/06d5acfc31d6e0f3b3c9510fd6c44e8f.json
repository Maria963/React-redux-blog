{"ast":null,"code":"import _regeneratorRuntime from \"/home/cretrix/projects/React-redux-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cretrix/projects/React-redux-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { GET_COMPANIES, DELETE_COMPANY, UPDATE_COMPANY, CREATE_COMPANY } from \"../types/companies\";\nimport { get, create } from \"./companiesTypeFunctions\";\nimport api from \"../../utils/api\";\n/*\nexport const createPost = ({ title, body }) => {\n  return dispatch => {\n    return axios\n      .post(`${apiUrl}/add`, { title, body })\n      .then(response => {\n        dispatch(createPostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\nexport const createPostSuccess = data => {\n  return {\n    type: ADD_POST,\n    payload: {\n      _id: data._id,\n      title: data.title,\n      body: data.body\n    }\n  };\n};\n\nexport const deletePostSuccess = id => {\n  return {\n    type: DELETE_POST,\n    payload: {\n      id\n    }\n  };\n};\n\nexport const deletePost = id => {\n  return dispatch => {\n    return axios\n      .get(`${apiUrl}/delete/${id}`)\n      .then(response => {\n        dispatch(deletePostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\n\n*/\n\nexport var getAllCompanies = function getAllCompanies() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return api.getCompanies();\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", dispatch(get(response.data)));\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                throw _context.t0;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var createCompany = function createCompany(data) {\n  return function (dispatch) {\n    return api.createCompanies(data).then(function (response) {\n      dispatch(create(response));\n    }).catch(function (error) {\n      throw error;\n    });\n  };\n};","map":{"version":3,"sources":["/home/cretrix/projects/React-redux-blog/src/store/actions/companies.js"],"names":["GET_COMPANIES","DELETE_COMPANY","UPDATE_COMPANY","CREATE_COMPANY","get","create","api","getAllCompanies","dispatch","getCompanies","response","data","createCompany","createCompanies","then","catch","error"],"mappings":";;AAAA,SACEA,aADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,cAJF,QAKO,oBALP;AAMA,SAASC,GAAT,EAAcC,MAAd,QAA4B,0BAA5B;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkDA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBF,GAAG,CAACG,YAAJ,EAFlB;;AAAA;AAECC,gBAAAA,QAFD;AAAA,iDAGIF,QAAQ,CAACJ,GAAG,CAACM,QAAQ,CAACC,IAAV,CAAJ,CAHZ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQD,CATM;AAWP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAD,IAAI,EAAI;AACnC,SAAO,UAAAH,QAAQ,EAAI;AACjB,WAAOF,GAAG,CACPO,eADI,CACYF,IADZ,EAEJG,IAFI,CAEC,UAAAJ,QAAQ,EAAI;AAChBF,MAAAA,QAAQ,CAACH,MAAM,CAACK,QAAD,CAAP,CAAR;AACD,KAJI,EAKJK,KALI,CAKE,UAAAC,KAAK,EAAI;AACd,YAAMA,KAAN;AACD,KAPI,CAAP;AAQD,GATD;AAUD,CAXM","sourcesContent":["import {\n  GET_COMPANIES,\n  DELETE_COMPANY,\n  UPDATE_COMPANY,\n  CREATE_COMPANY\n} from \"../types/companies\";\nimport { get, create } from \"./companiesTypeFunctions\";\nimport api from \"../../utils/api\";\n\n/*\nexport const createPost = ({ title, body }) => {\n  return dispatch => {\n    return axios\n      .post(`${apiUrl}/add`, { title, body })\n      .then(response => {\n        dispatch(createPostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\nexport const createPostSuccess = data => {\n  return {\n    type: ADD_POST,\n    payload: {\n      _id: data._id,\n      title: data.title,\n      body: data.body\n    }\n  };\n};\n\nexport const deletePostSuccess = id => {\n  return {\n    type: DELETE_POST,\n    payload: {\n      id\n    }\n  };\n};\n\nexport const deletePost = id => {\n  return dispatch => {\n    return axios\n      .get(`${apiUrl}/delete/${id}`)\n      .then(response => {\n        dispatch(deletePostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\n\n*/\n\nexport const getAllCompanies = () => {\n  return async dispatch => {\n    try {\n      let response = await api.getCompanies();\n      return dispatch(get(response.data));\n    } catch (error) {\n      throw error;\n    }\n  };\n};\n\nexport const createCompany = data => {\n  return dispatch => {\n    return api\n      .createCompanies(data)\n      .then(response => {\n        dispatch(create(response));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}