{"ast":null,"code":"import _regeneratorRuntime from \"/home/cretrix/projects/React-redux-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/cretrix/projects/React-redux-blog/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { get, create, err, update, edit } from \"./companiesTypeFunctions\";\nimport api from \"../../utils/api\";\nexport var getAllCompanies = function getAllCompanies() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return api.getCompanies();\n\n              case 3:\n                response = _context.sent;\n                return _context.abrupt(\"return\", dispatch(get(response.data)));\n\n              case 7:\n                _context.prev = 7;\n                _context.t0 = _context[\"catch\"](0);\n                throw _context.t0;\n\n              case 10:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, null, [[0, 7]]);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var createCompany = function createCompany(data) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                _context2.next = 3;\n                return api.createCompanies(data);\n\n              case 3:\n                response = _context2.sent;\n                return _context2.abrupt(\"return\", dispatch(create(response)));\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](0);\n                return _context2.abrupt(\"return\", dispatch(err(_context2.t0.response.data.errors.name[0])));\n\n              case 10:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[0, 7]]);\n      }));\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var editCompany = function editCompany(id, data) {\n  console.log(id, data, 54);\n  return;\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref3 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.prev = 0;\n                _context3.next = 3;\n                return api.editCompanies(id, data);\n\n              case 3:\n                response = _context3.sent;\n                console.log(\"nnn\", response);\n                dispatch.push(\"/companies\");\n                return _context3.abrupt(\"return\", dispatch(edit(response)));\n\n              case 9:\n                _context3.prev = 9;\n                _context3.t0 = _context3[\"catch\"](0);\n                return _context3.abrupt(\"return\", dispatch(err(_context3.t0.response.data.errors.name[0])));\n\n              case 12:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, null, [[0, 9]]);\n      }));\n\n      return function (_x3) {\n        return _ref3.apply(this, arguments);\n      };\n    }()\n  );\n};\nexport var getCompany = function getCompany(id) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref4 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee4(dispatch) {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                _context4.next = 3;\n                return api.getCompany(id);\n\n              case 3:\n                response = _context4.sent;\n                return _context4.abrupt(\"return\", dispatch(update(response)));\n\n              case 7:\n                _context4.prev = 7;\n                _context4.t0 = _context4[\"catch\"](0);\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, null, [[0, 7]]);\n      }));\n\n      return function (_x4) {\n        return _ref4.apply(this, arguments);\n      };\n    }()\n  );\n};\n/*\nexport const createPost = ({ title, body }) => {\n  return dispatch => {\n    return axios\n      .post(`${apiUrl}/add`, { title, body })\n      .then(response => {\n        dispatch(createPostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\nexport const createPostSuccess = data => {\n  return {\n    type: ADD_POST,\n    payload: {\n      _id: data._id,\n      title: data.title,\n      body: data.body\n    }\n  };\n};\n\nexport const deletePostSuccess = id => {\n  return {\n    type: DELETE_POST,\n    payload: {\n      id\n    }\n  };\n};\n\nexport const deletePost = id => {\n  return dispatch => {\n    return axios\n      .get(`${apiUrl}/delete/${id}`)\n      .then(response => {\n        dispatch(deletePostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\n\n*/","map":{"version":3,"sources":["/home/cretrix/projects/React-redux-blog/src/store/actions/companies.js"],"names":["get","create","err","update","edit","api","getAllCompanies","dispatch","getCompanies","response","data","createCompany","createCompanies","errors","name","editCompany","id","console","log","editCompanies","push","getCompany"],"mappings":";;AAAA,SAASA,GAAT,EAAcC,MAAd,EAAsBC,GAAtB,EAA2BC,MAA3B,EAAmCC,IAAnC,QAA+C,0BAA/C;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AAEA,OAAO,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,iBAAMC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBF,GAAG,CAACG,YAAJ,EAFlB;;AAAA;AAECC,gBAAAA,QAFD;AAAA,iDAGIF,QAAQ,CAACP,GAAG,CAACS,QAAQ,CAACC,IAAV,CAAJ,CAHZ;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAQD,CATM;AAWP,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAAAD,IAAI,EAAI;AACnC;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAMH,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBF,GAAG,CAACO,eAAJ,CAAoBF,IAApB,CAFlB;;AAAA;AAECD,gBAAAA,QAFD;AAAA,kDAGIF,QAAQ,CAACN,MAAM,CAACQ,QAAD,CAAP,CAHZ;;AAAA;AAAA;AAAA;AAAA,kDAKIF,QAAQ,CAACL,GAAG,CAAC,aAAMO,QAAN,CAAeC,IAAf,CAAoBG,MAApB,CAA2BC,IAA3B,CAAgC,CAAhC,CAAD,CAAJ,CALZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AASD,CAVM;AAYP,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,EAAD,EAAKN,IAAL,EAAc;AACvCO,EAAAA,OAAO,CAACC,GAAR,CAAYF,EAAZ,EAAgBN,IAAhB,EAAsB,EAAtB;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAMH,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBF,GAAG,CAACc,aAAJ,CAAkBH,EAAlB,EAAsBN,IAAtB,CAFlB;;AAAA;AAECD,gBAAAA,QAFD;AAGHQ,gBAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBT,QAAnB;AACAF,gBAAAA,QAAQ,CAACa,IAAT,CAAc,YAAd;AAJG,kDAKIb,QAAQ,CAACH,IAAI,CAACK,QAAD,CAAL,CALZ;;AAAA;AAAA;AAAA;AAAA,kDAQIF,QAAQ,CAACL,GAAG,CAAC,aAAMO,QAAN,CAAeC,IAAf,CAAoBG,MAApB,CAA2BC,IAA3B,CAAgC,CAAhC,CAAD,CAAJ,CARZ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAYD,CAfM;AAiBP,OAAO,IAAMO,UAAU,GAAG,SAAbA,UAAa,CAAAL,EAAE,EAAI;AAC9B;AAAA;AAAA;AAAA;AAAA;AAAA,+BAAO,kBAAMT,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEkBF,GAAG,CAACgB,UAAJ,CAAeL,EAAf,CAFlB;;AAAA;AAECP,gBAAAA,QAFD;AAAA,kDAIIF,QAAQ,CAACJ,MAAM,CAACM,QAAD,CAAP,CAJZ;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;;AAAA;AAAA;AAAA;AAAA;AAAA;AAUD,CAXM;AAaP","sourcesContent":["import { get, create, err, update, edit } from \"./companiesTypeFunctions\";\nimport api from \"../../utils/api\";\n\nexport const getAllCompanies = () => {\n  return async dispatch => {\n    try {\n      let response = await api.getCompanies();\n      return dispatch(get(response.data));\n    } catch (error) {\n      throw error;\n    }\n  };\n};\n\nexport const createCompany = data => {\n  return async dispatch => {\n    try {\n      let response = await api.createCompanies(data);\n      return dispatch(create(response));\n    } catch (error) {\n      return dispatch(err(error.response.data.errors.name[0]));\n      // throw error;\n    }\n  };\n};\n\nexport const editCompany = (id, data) => {\n  console.log(id, data, 54);\n  return;\n  return async dispatch => {\n    try {\n      let response = await api.editCompanies(id, data);\n      console.log(\"nnn\", response);\n      dispatch.push(\"/companies\");\n      return dispatch(edit(response));\n    } catch (error) {\n      //console.log(error.response.data.errors.name[0]);\n      return dispatch(err(error.response.data.errors.name[0]));\n      // throw error;\n    }\n  };\n};\n\nexport const getCompany = id => {\n  return async dispatch => {\n    try {\n      let response = await api.getCompany(id);\n      // console.log(\"ddd\", response);\n      return dispatch(update(response));\n    } catch (error) {\n      // return dispatch(err(error.response.data.errors.name[0]));\n      // throw error;\n    }\n  };\n};\n\n/*\nexport const createPost = ({ title, body }) => {\n  return dispatch => {\n    return axios\n      .post(`${apiUrl}/add`, { title, body })\n      .then(response => {\n        dispatch(createPostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\nexport const createPostSuccess = data => {\n  return {\n    type: ADD_POST,\n    payload: {\n      _id: data._id,\n      title: data.title,\n      body: data.body\n    }\n  };\n};\n\nexport const deletePostSuccess = id => {\n  return {\n    type: DELETE_POST,\n    payload: {\n      id\n    }\n  };\n};\n\nexport const deletePost = id => {\n  return dispatch => {\n    return axios\n      .get(`${apiUrl}/delete/${id}`)\n      .then(response => {\n        dispatch(deletePostSuccess(response.data));\n      })\n      .catch(error => {\n        throw error;\n      });\n  };\n};\n\n\n*/\n"]},"metadata":{},"sourceType":"module"}