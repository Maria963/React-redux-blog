{"ast":null,"code":"import axios from 'axios';\nvar SERVER_URL = \"http://127.0.0.1:8000\";\nvar Auth = axios.create();\nAuth.interceptors.response.use(function (response) {\n  return response;\n}, function (error) {\n  if (error.response.status === 401) {\n    localStorage.removeItem(\"access_token\");\n    window.location.href = \"/login\"; // history.push(\"/login\");\n  }\n});\n\nfunction getCompanies() {\n  try {\n    var res = Auth.get(SERVER_URL + '/api/companies', {\n      headers: {\n        Authorization: \"Bearer \".concat(localStorage.getItem('access_token')),\n        'Content-Type': 'application/json'\n      }\n    });\n    return res;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nfunction login(data) {\n  var LOGIN_ENDPOINT = \"\".concat(SERVER_URL, \"/api/login\");\n  console.log('ddd');\n\n  try {\n    var response = axios.post(LOGIN_ENDPOINT, data);\n    console.log(response); //  if(response.status === 200 && response.data.remember_token && response.data.expireAt){\n\n    if (response.status === 200 && response.data.success === true) {\n      var jwt = response.data.token; //  let expire_at = response.data.expireAt;\n\n      localStorage.setItem(\"access_token\", jwt);\n    }\n\n    return response.data.success;\n  } catch (e) {\n    console.log(e);\n  }\n}\n/*\nconst register = async (data) => {\n    const SIGNUP_ENDPOINT = `${SERVER_URL}/api/user/register`;\n    try {\n        let response = await axios({\n            method: 'post',\n            responseType: 'json',\n            url: SIGNUP_ENDPOINT,\n            data: data\n          });\n    } catch(e){\n        console.log(e);\n    }\n}*/\n\n/*\nconst logout = (props) => {\n    localStorage.removeItem(\"access_token\");\n    props.history.push('/login');\n   // localStorage.removeItem(\"expire_at\");\n}\n*/\n\n\nvar isAuth = function isAuth() {\n  console.log(localStorage.getItem('access_token'));\n\n  if (localStorage.getItem('access_token') == null) {\n    return false;\n  }\n\n  return true;\n};\n\nexport { login, isAuth, SERVER_URL, Auth, getCompanies };","map":{"version":3,"sources":["/home/cretrix/projects/React-blog/src/utils/JWTAuth.js"],"names":["axios","SERVER_URL","Auth","create","interceptors","response","use","error","status","localStorage","removeItem","window","location","href","getCompanies","res","get","headers","Authorization","getItem","console","login","data","LOGIN_ENDPOINT","log","post","success","jwt","token","setItem","e","isAuth"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,IAAMC,UAAU,GAAG,uBAAnB;AAEA,IAAMC,IAAI,GAAGF,KAAK,CAACG,MAAN,EAAb;AAGAD,IAAI,CAACE,YAAL,CAAkBC,QAAlB,CAA2BC,GAA3B,CACE,UAAAD,QAAQ,EAAI;AACV,SAAOA,QAAP;AACD,CAHH,EAIE,UAAAE,KAAK,EAAI;AACP,MAAIA,KAAK,CAACF,QAAN,CAAeG,MAAf,KAA0B,GAA9B,EAAmC;AACjCC,IAAAA,YAAY,CAACC,UAAb,CAAwB,cAAxB;AACAC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,QAAvB,CAFiC,CAGlC;AACA;AAEF,CAXH;;AAeA,SAASC,YAAT,GAAyB;AACvB,MAAI;AACI,QAAIC,GAAG,GAAIb,IAAI,CAACc,GAAL,CAASf,UAAU,GAAC,gBAApB,EACX;AACIgB,MAAAA,OAAO,EAAE;AACLC,QAAAA,aAAa,mBAAYT,YAAY,CAACU,OAAb,CAAqB,cAArB,CAAZ,CADR;AAEL,wBAAgB;AAFX;AADb,KADW,CAAX;AAOA,WAAOJ,GAAP;AACH,GATL,CAUE,OAAOR,KAAP,EAAc;AACda,IAAAA,OAAO,CAACb,KAAR,CAAcA,KAAd;AACD;AACE;;AAGD,SAASc,KAAT,CAAgBC,IAAhB,EAAuB;AACvB,MAAMC,cAAc,aAAMtB,UAAN,eAApB;AACAmB,EAAAA,OAAO,CAACI,GAAR,CAAY,KAAZ;;AACA,MAAI;AACA,QAAInB,QAAQ,GAAIL,KAAK,CAACyB,IAAN,CAAWF,cAAX,EAA2BD,IAA3B,CAAhB;AACCF,IAAAA,OAAO,CAACI,GAAR,CAAYnB,QAAZ,EAFD,CAGF;;AACE,QAAGA,QAAQ,CAACG,MAAT,KAAoB,GAApB,IAA2BH,QAAQ,CAACiB,IAAT,CAAcI,OAAd,KAAwB,IAAtD,EAA2D;AACvD,UAAIC,GAAG,GAAGtB,QAAQ,CAACiB,IAAT,CAAcM,KAAxB,CADuD,CAEzD;;AACAnB,MAAAA,YAAY,CAACoB,OAAb,CAAqB,cAArB,EAAqCF,GAArC;AAED;;AACD,WAAOtB,QAAQ,CAACiB,IAAT,CAAcI,OAArB;AAEH,GAZD,CAYE,OAAMI,CAAN,EAAQ;AACNV,IAAAA,OAAO,CAACI,GAAR,CAAYM,CAAZ;AACH;AACJ;AAED;;;;;;;;;;;;;;;AAcA;;;;;;;;;AAQA,IAAMC,MAAM,GAAG,SAATA,MAAS,GAAM;AACjBX,EAAAA,OAAO,CAACI,GAAR,CAAYf,YAAY,CAACU,OAAb,CAAqB,cAArB,CAAZ;;AACA,MAAIV,YAAY,CAACU,OAAb,CAAqB,cAArB,KAAsC,IAA1C,EAAgD;AAC5C,WAAO,KAAP;AACH;;AACF,SAAO,IAAP;AACF,CAND;;AASA,SAASE,KAAT,EAAgBU,MAAhB,EAAwB9B,UAAxB,EAAoCC,IAApC,EAA0CY,YAA1C","sourcesContent":["import axios from 'axios';\nconst SERVER_URL = \"http://127.0.0.1:8000\"\n\nconst Auth = axios.create();\n\n\nAuth.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    if (error.response.status === 401) {\n      localStorage.removeItem(\"access_token\");\n      window.location.href = \"/login\";\n     // history.push(\"/login\");\n    }\n   \n  }\n);\n\n\nfunction getCompanies () {\n  try {\n          let res =  Auth.get(SERVER_URL+'/api/companies',\n          {\n              headers: {\n                  Authorization: `Bearer ${localStorage.getItem('access_token')}`,\n                  'Content-Type': 'application/json'\n              }\n          });\n          return res;\n      }\n    catch (error) {\n    console.error(error)\n  }\n    }\n\n\n    function login (data)  {\n    const LOGIN_ENDPOINT = `${SERVER_URL}/api/login`;\n    console.log('ddd');\n    try {\n        let response =  axios.post(LOGIN_ENDPOINT, data);\n         console.log(response)\n      //  if(response.status === 200 && response.data.remember_token && response.data.expireAt){\n        if(response.status === 200 && response.data.success===true){\n            let jwt = response.data.token;\n          //  let expire_at = response.data.expireAt;\n          localStorage.setItem(\"access_token\", jwt);\n         \n        } \n        return response.data.success;\n\n    } catch(e){\n        console.log(e);\n    }\n}\n\n/*\nconst register = async (data) => {\n    const SIGNUP_ENDPOINT = `${SERVER_URL}/api/user/register`;\n    try {\n        let response = await axios({\n            method: 'post',\n            responseType: 'json',\n            url: SIGNUP_ENDPOINT,\n            data: data\n          });\n    } catch(e){\n        console.log(e);\n    }\n}*/\n/*\nconst logout = (props) => {\n    localStorage.removeItem(\"access_token\");\n    props.history.push('/login');\n   // localStorage.removeItem(\"expire_at\");\n}\n*/\n\nconst isAuth = () => {\n    console.log(localStorage.getItem('access_token'));\n    if (localStorage.getItem('access_token')==null) {\n        return false;\n    }\n   return true;\n}\n\n\nexport { login, isAuth, SERVER_URL ,Auth, getCompanies}"]},"metadata":{},"sourceType":"module"}